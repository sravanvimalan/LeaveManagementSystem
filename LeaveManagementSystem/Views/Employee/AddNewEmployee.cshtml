
@model LeaveManagementSystem.ViewModel.AdminProfileViewModel



<meta name="viewport" content="width=device-width, initial-scale=1">

<link rel="stylesheet" href="~/Content/CustomStyleSheet.css">



<form action="/employee/addnewemployee" class="form-validation" method="post" novalidate="novalidate" enctype="multipart/form-data">
    <div class="container ">
        <h3>Register</h3>
        <p>Enter employee details.</p>
        <br> <br>
        <label for="Image">Add Image</label>
        <input type="file" name="Image" id="Image" />
        <br>
        <br> <br> <br> <br>
        <div class="form-row">
            <div class="form-group col-sm-3">
                @Html.LabelFor(temp => temp.FirstName)
                @Html.TextBoxFor(temp => temp.FirstName)
                @Html.ValidationMessageFor(temp => temp.FirstName, "", new { @class = "text-danger", required = "required" })
            </div>
            <div class="form-group col-sm-3">
                @Html.LabelFor(temp => temp.MiddleName)
                @Html.TextBoxFor(temp => temp.MiddleName)

            </div>


            <div class="form-group col-sm-3">
                @Html.LabelFor(temp => temp.LastName)
                @Html.TextBoxFor(temp => temp.LastName)
                @Html.ValidationMessageFor(temp => temp.LastName, "", new { @class = "text-danger", required = "required" })

            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-sm-9">
                @Html.LabelFor(temp => temp.EmailID, "Email ID")
                @Html.TextBoxFor(temp => temp.EmailID)
                @Html.ValidationMessageFor(temp => temp.EmailID, "", new { @class = "text-danger", required = "required" })
                <div class="valid-feedback">looks good</div>
                <div class="invalid-feedback">Invalid email</div>
                <small class="email-exist text-danger"></small>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-sm-4">
                @Html.LabelFor(temp => temp.Password)
                @Html.PasswordFor(temp => temp.Password)
                @Html.ValidationMessageFor(temp => temp.Password, "", new { @class = "text-danger", required = "required" })
            </div>
            <div class="form-group col-sm-1">

            </div>
            <div class="form-group col-sm-4">
                <label for="pass2"><b>Confirm Password</b></label>
                <input type="password" placeholder="confirm Password" id="Password2" required>
                <p id="validate-status"></p>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-sm-9">
                @Html.LabelFor(temp => temp.AddressLine1)
                @Html.TextBoxFor(temp => temp.AddressLine1)
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-sm-9">
                @Html.LabelFor(temp => temp.AddressLine1)
                @Html.TextBoxFor(temp => temp.AddressLine1)
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-sm-9">
                @Html.LabelFor(temp => temp.AddressLine2)
                @Html.TextBoxFor(temp => temp.AddressLine2)
            </div>
        </div>
        <div class="form-row">
            <div class="form-group col-sm-4">
                @Html.LabelFor(temp => temp.AddressLine3)
                @Html.TextBoxFor(temp => temp.AddressLine3)
            </div>
            <div class="form-group col-sm-1">

            </div>
            <div class="form-group col-sm-4">

                @Html.LabelFor(temp => temp.MobileNumber, "Mobile Number")
                @Html.TextBoxFor(temp => temp.MobileNumber, new { pattern = "^[789]\\d{9}$", required = "required" })
                <div class="valid-feedback">looks good</div>
                <div class="invalid-feedback">Invalid mobile number</div>
                <small class="mobile-exist text-danger"></small>
            </div>
        </div>

        <label for="DateOfBirth"><b>Date Of Birth</b></label>
        <input type="date" name="DateOfBirth" id="DateOfBirth" required>

        @Html.LabelFor(temp => temp.GenderStringId, "Gender");
        @Html.DropDownListFor(temp => temp.GenderStringId, Model.GenderList, "Select Gender")

        <br /><br />
        <fieldset>
            <legend>Experience</legend>

            <div class="form-row">
                <div class="form-group col-sm-4">
                    @Html.LabelFor(temp => temp.CompanyName)
                    @Html.TextBoxFor(temp => temp.CompanyName)
                </div>
                <div class="form-group col-sm-1">

                </div>
                <div class="form-group col-sm-4">
                    @Html.LabelFor(temp => temp.JobRole)
                    @Html.TextBoxFor(temp => temp.JobRole)
                </div>
            </div>

            <div class="form-row">
                <div class="form-group col-sm-4">
                    @Html.LabelFor(temp => temp.StartDate)
                    @Html.TextBoxFor(model => model.StartDate,
             new { @type = "date", @Value = Model.StartDate.ToString("yyyy-MM-dd") })

                </div>
                <div class="form-group col-sm-1">

                </div>
                <div class="form-group col-sm-4">
                    @Html.LabelFor(temp => temp.EndDate)
                    @Html.TextBoxFor(model => model.EndDate,
             new { @type = "date", @Value = Model.EndDate.ToString("yyyy-MM-dd") })
                    <br><br>
                </div>
            </div>
        </fieldset>
        <fieldset>
            <legend>Company</legend>
            <div class="form-row">
                <div class="form-group col-sm-4">
                    @Html.LabelFor(temp => temp.JoinDate)
                    @Html.TextBoxFor(model => model.JoinDate,
             new { @type = "date", @Value = Model.JoinDate.ToString("yyyy-MM-dd") })
                </div>
                <div class="form-group col-sm-1">

                </div>
                <div class="form-group col-sm-4">
                    @Html.LabelFor(temp => temp.QualificationStringId, "Qualification")
                    @Html.DropDownListFor(temp => temp.QualificationStringId, Model.QualificationList, "Select Qualification")
                </div>
            </div>
            <br /><br />
            @Html.LabelFor(temp => temp.DepartmentStringId, "Department")
            @Html.DropDownListFor(temp => temp.DepartmentStringId, Model.DepartmentList, "select Department")
            <br />  <br />
            @Html.LabelFor(temp => temp.DesignationStringId, "Designation")
            @Html.DropDownListFor(temp => temp.DesignationStringId, Model.DesignationList, "select Designation")

            <br><br>

            @Html.LabelFor(temp => temp.IsSpecialPermission)
            @Html.CheckBoxFor(temp => temp.IsSpecialPermission)


            @Html.LabelFor(temp => temp.IsVirtualTeamHead)
            @Html.CheckBoxFor(temp => temp.IsVirtualTeamHead)


            @Html.LabelFor(temp => temp.CurrentStatus)
            @Html.CheckBoxFor(temp => temp.CurrentStatus)
        </fieldset>
        <div class="form-row">
            <div class="form-group  col-sm-3">

                <button type="submit" class="btn btn-info">Register new employee</button>
            </div>

        </div>
    </div>
    

</form>

<script>

    $(document).ready(function () {
        $("#Password2").blur(validate);
        function validate(event) {
            var password1 = $("#Password").val();
            var password2 = $("#Password2").val();

            if (password1 == password2) {
                $("#validate-status").text("match").css("color","green");
            }
            else {
                $("#validate-status").text("not match").css("color", "red");
            }

        }
    });


   



    $(document).on("submit", ".form-validation", validation);
    $(".form-validation,input").blur(validation);
    function validation(event) {
        if ($(".form-validation")[0].checkValidity() == false) {
            event.preventDefault();
        }
        $(".form-validation")[0].classList.add("was-validated");
    }








    $("#MobileNumber").blur(
        function () {
            $.ajax(
                {
                    url: "/employee/getmobile?mobile=" + $("#MobileNumber").val(),
                    type: "GET",
                    success: function (response) {
                        if (response == "found") {
                            $(".mobile-exist").text("Mobile number already exist");
                            $(".mobile-exist").parent(".form-group").find(".valid-feedback").css("color", "white");
                        }
                        else {
                            $(".mobile-exist").text(" ");
                            $(".mobile-exist").parent(".form-group").find(".valid-feedback").css("color", "green");
                        }
                    },
                    error: function () {
                        alert("Error occured")
                    }
                }

            )
        });


    $("#EmailID").blur(
        function () {
            $.ajax(
                {
                    url: "/employee/getemail?email=" + $("#EmailID").val(),
                    type: "GET",
                    success: function (response) {
                        if (response == "found") {
                            $(".email-exist").text("Email already exist");
                            $(".email-exist").parent(".form-group").find(".valid-feedback").css("color", "white");
                        }
                        else {
                            $(".email-exist").text("");
                            $(".email-exist").parent(".form-group").find(".valid-feedback").css("color", "green");
                        }
                    },
                    error: function () {
                        alert("Error occured")
                    }
                }

            )
        });
</script>

